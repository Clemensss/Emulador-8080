!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	emulador.h	/^    uint8_t A;    $/;"	m	struct:Registers
AC	emulador.h	/^    uint8_t AC:1;$/;"	m	struct:ConditionFlags
B	emulador.h	/^    uint8_t B;    $/;"	m	struct:Registers
B	invaders.h	/^Õ_˛√‹>2Ò *ç F!PL∏ (#/;"	v
B	invaders2.h	/^Õ_˛√‹>2Ò *ç F!PL∏ (#/;"	v
C	emulador.h	/^    uint8_t C;$/;"	m	struct:Registers
CY	emulador.h	/^    uint8_t CY:1;$/;"	m	struct:ConditionFlags
ConditionFlags	emulador.h	/^struct ConditionFlags$/;"	s
D	emulador.h	/^    uint8_t D;    $/;"	m	struct:Registers
E	emulador.h	/^    uint8_t E;    $/;"	m	struct:Registers
EMULATOR_H_	emulador.h	2;"	d
H	emulador.h	/^    uint8_t H;    $/;"	m	struct:Registers
L	emulador.h	/^    uint8_t L;    $/;"	m	struct:Registers
MAC_H_	machine.h	2;"	d
Machine	emulador.h	/^struct Machine$/;"	s
P	emulador.h	/^    uint8_t P:1;$/;"	m	struct:ConditionFlags
PC	emulador.h	/^    uint16_t PC;    $/;"	m	struct:Registers
RAM	emulador.h	/^    uint8_t *RAM;$/;"	m	struct:Machine
RAM_SIZE	emulador.h	8;"	d
REG	emulador.h	9;"	d
Registers	emulador.h	/^struct Registers$/;"	s
S	emulador.h	/^    uint8_t S:1;$/;"	m	struct:ConditionFlags
SP	emulador.h	/^    uint16_t SP;    $/;"	m	struct:Registers
Z	emulador.h	/^    uint8_t Z:1;$/;"	m	struct:ConditionFlags
add_immediate	emulador.c	/^void add_immediate(state8080 *state)$/;"	f
add_immediate_carry	emulador.c	/^void add_immediate_carry(state8080 *state)$/;"	f
add_memory	emulador.c	/^void add_memory(state8080 *state)$/;"	f
add_memory_carry	emulador.c	/^void add_memory_carry(state8080 *state)$/;"	f
add_reg_pair_HL	emulador.c	/^void add_reg_pair_HL(state8080 *state, uint8_t *rh, uint8_t *rl)$/;"	f
add_register	emulador.c	/^void add_register(state8080 *state, uint8_t r)$/;"	f
add_register_carry	emulador.c	/^void add_register_carry(state8080 *state, uint8_t r)$/;"	f
and_immediate	emulador.c	/^void and_immediate(state8080 *state)$/;"	f
and_memory	emulador.c	/^void and_memory(state8080 *state)$/;"	f
and_register	emulador.c	/^void and_register(state8080 *state, uint8_t r)$/;"	f
and_thing	emulador.c	/^void and_thing(state8080 *state, uint8_t var)$/;"	f
call	emulador.c	/^void call(state8080 *state)$/;"	f
cmp_immediate	emulador.c	/^void cmp_immediate(state8080 *state)$/;"	f
cmp_memory	emulador.c	/^void cmp_memory(state8080 *state)$/;"	f
cmp_register	emulador.c	/^void cmp_register(state8080 *state, uint8_t r)$/;"	f
cmp_thing	emulador.c	/^void cmp_thing(state8080 *state, uint8_t var)$/;"	f
command_maker	machine.c	/^void command_maker(state8080 *state)$/;"	f
complement_acc	emulador.c	/^void complement_acc(state8080 *state)$/;"	f
complement_carry	emulador.c	/^void complement_carry(state8080 *state)$/;"	f
cond_call	emulador.c	/^void cond_call(state8080 *state, uint8_t flag)$/;"	f
cond_jump	emulador.c	/^void cond_jump(state8080 *state, uint8_t flag)$/;"	f
cond_ret_op	emulador.c	/^void cond_ret_op(state8080 *state, uint8_t flag)$/;"	f
dec_memory	emulador.c	/^void dec_memory(state8080 *state)$/;"	f
dec_reg_pair	emulador.c	/^void dec_reg_pair(uint8_t *rh, uint8_t *rl)$/;"	f
dec_register	emulador.c	/^void dec_register(state8080 *state, uint8_t *r)$/;"	f
disable_inter	emulador.c	/^void disable_inter(state8080 *state)$/;"	f
disjoint	emulador.c	/^void disjoint(uint16_t joint, uint8_t *rh, uint8_t *rl)$/;"	f
disseble8080	dissemb.c	/^int disseble8080(unsigned char *buffer, int pc)$/;"	f
enable_inter	emulador.c	/^void enable_inter(state8080 *state)$/;"	f
exchange_HL_DE	emulador.c	/^void exchange_HL_DE(state8080 *state)$/;"	f
exchange_HL_st	emulador.c	/^void exchange_HL_st(state8080 *state)$/;"	f
flags	emulador.h	/^typedef struct ConditionFlags flags;$/;"	t	typeref:struct:ConditionFlags
get_HL_addr	emulador.c	/^uint16_t get_HL_addr(state8080 *state)$/;"	f
get_PC_data	emulador.c	/^uint8_t get_PC_data(state8080 *state)$/;"	f
get_bytes_addr	emulador.c	/^uint16_t get_bytes_addr(state8080 *state)$/;"	f
halt	emulador.c	/^void halt(state8080 *state)$/;"	f
halt	emulador.h	/^    uint8_t halt:1;$/;"	m	struct:Machine
inc_memory	emulador.c	/^void inc_memory(state8080 *state)$/;"	f
inc_reg_pair	emulador.c	/^void inc_reg_pair(uint8_t *rh, uint8_t *rl)$/;"	f
inc_register	emulador.c	/^void inc_register(state8080 *state, uint8_t *r)$/;"	f
init_flag	emulador.c	/^flags* init_flag()$/;"	f
init_machine	emulador.c	/^state8080* init_machine()$/;"	f
init_reg	emulador.c	/^reg* init_reg()$/;"	f
input	emulador.c	/^void input(state8080 *state, uint8_t data)$/;"	f
interrupt	emulador.h	/^    uint8_t interrupt:1;$/;"	m	struct:Machine
is_bit_set	emulador.c	/^int is_bit_set(uint8_t byte, int bit)$/;"	f
jmp	emulador.h	/^    uint8_t jmp:1;$/;"	m	struct:ConditionFlags
joint	emulador.c	/^uint16_t joint(uint8_t rh, uint8_t rl)$/;"	f
jump	emulador.c	/^void jump(state8080 *state)$/;"	f
jump_HL_dir	emulador.c	/^void jump_HL_dir(state8080 *state)$/;"	f
load_HL_dir	emulador.c	/^void load_HL_dir(state8080 *state)$/;"	f
load_acc_dir	emulador.c	/^void load_acc_dir(state8080 *state)$/;"	f
load_acc_indir	emulador.c	/^void load_acc_indir(state8080 *state, uint8_t *rh, uint8_t *rl)$/;"	f
load_reg_pair_imed	emulador.c	/^void load_reg_pair_imed(state8080 *state, uint8_t *rh, uint8_t *rl)$/;"	f
load_rom	main.c	/^void load_rom(state8080 *state, char *file_name)$/;"	f
machine_loop	main.c	/^void machine_loop(state8080 *state)$/;"	f
main	dissemb.c	/^int main()$/;"	f
main	main.c	/^int main(int argc, char **argv)$/;"	f
move_HL_SP	emulador.c	/^void move_HL_SP(state8080 *state)$/;"	f
move_from_mem	emulador.c	/^void move_from_mem(state8080 *state, uint8_t *r)$/;"	f
move_immediate	emulador.c	/^void move_immediate(state8080 *state, uint8_t *r)$/;"	f
move_register	emulador.c	/^void move_register(uint8_t *r1, uint8_t *r2)$/;"	f
move_to_mem	emulador.c	/^void move_to_mem(state8080 *state, uint8_t *r)$/;"	f
move_to_mem_imed	emulador.c	/^void move_to_mem_imed(state8080 *state)$/;"	f
or_immediate	emulador.c	/^void or_immediate(state8080 *state)$/;"	f
or_memory	emulador.c	/^void or_memory(state8080 *state)$/;"	f
or_register	emulador.c	/^void or_register(state8080 *state, uint8_t r)$/;"	f
or_thing	emulador.c	/^void or_thing(state8080 *state, uint8_t var)$/;"	f
output	emulador.c	/^void output(state8080 *state, uint8_t *data)$/;"	f
parity	emulador.c	/^int parity(uint8_t num)$/;"	f
pop	emulador.c	/^void pop(state8080 *state, uint8_t *rh, uint8_t *rl)$/;"	f
pop_psw	emulador.c	/^void pop_psw(state8080 *state)$/;"	f
print_state	emulador.c	/^void print_state(state8080 *state)$/;"	f
push	emulador.c	/^void push(state8080 *state, uint8_t rh, uint8_t rl)$/;"	f
push_psw	emulador.c	/^void push_psw(state8080 *state)$/;"	f
reg	emulador.h	/^typedef struct Registers reg;$/;"	t	typeref:struct:Registers
registers	emulador.h	/^    reg *registers;$/;"	m	struct:Machine
restart	emulador.c	/^void restart(state8080 *state, uint8_t opcode)$/;"	f
ret_op	emulador.c	/^void ret_op(state8080 *state)$/;"	f
rom_reader	main.c	/^uint8_t* rom_reader(char *file_name, int *file_size)$/;"	f
rotate_byte	emulador.c	/^void rotate_byte(state8080 *state, uint8_t cy_set, uint8_t lone_bit, uint8_t shifted)$/;"	f
rotate_left	emulador.c	/^void rotate_left(state8080 *state)$/;"	f
rotate_left_carry	emulador.c	/^void rotate_left_carry(state8080 *state)$/;"	f
rotate_right	emulador.c	/^void rotate_right(state8080 *state)$/;"	f
rotate_right_carry	emulador.c	/^void rotate_right_carry(state8080 *state)$/;"	f
set_bit	emulador.c	/^uint8_t set_bit(uint8_t byte, uint8_t bit)$/;"	f
set_carry	emulador.c	/^void set_carry(state8080 *state)$/;"	f
set_flags	emulador.c	/^uint8_t set_flags(state8080 *state, uint16_t result)$/;"	f
state8080	emulador.h	/^typedef struct Machine state8080;$/;"	t	typeref:struct:Machine
status_flags	emulador.h	/^    flags *status_flags;$/;"	m	struct:Machine
store_HL_dir	emulador.c	/^void store_HL_dir(state8080 *state)$/;"	f
store_acc_dir	emulador.c	/^void store_acc_dir(state8080 *state)$/;"	f
store_acc_indir	emulador.c	/^void store_acc_indir(state8080 *state, uint8_t *rh, uint8_t *rl)$/;"	f
sub_immediate	emulador.c	/^void sub_immediate(state8080 *state)$/;"	f
sub_immediate_borrow	emulador.c	/^void sub_immediate_borrow(state8080 *state)$/;"	f
sub_memory	emulador.c	/^void sub_memory(state8080 *state)$/;"	f
sub_memory_borrow	emulador.c	/^void sub_memory_borrow(state8080 *state)$/;"	f
sub_register	emulador.c	/^void sub_register(state8080 *state, uint8_t r)$/;"	f
sub_register_borrow	emulador.c	/^void sub_register_borrow(state8080 *state, uint8_t r)$/;"	f
swap	emulador.c	/^void swap(uint8_t *one, uint8_t *two)$/;"	f
tests	emulador.c	/^void tests()$/;"	f
twoscomp	emulador.c	/^uint8_t twoscomp(uint8_t num)$/;"	f
xor_immediate	emulador.c	/^void xor_immediate(state8080 *state)$/;"	f
xor_memory	emulador.c	/^void xor_memory(state8080 *state)$/;"	f
xor_register	emulador.c	/^void xor_register(state8080 *state, uint8_t r)$/;"	f
xor_thing	emulador.c	/^void xor_thing(state8080 *state, uint8_t var)$/;"	f
~˛	invaders.h	/^√Ç/;"	v
~˛	invaders2.h	/^√Ç/;"	v
